---
description: 個人プロジェクト用デバッグルール
globs: 
alwaysApply: false
---
---
description: 小規模開発用の体系的デバッグアプローチ
globs: 
alwaysApply: true
---
<DEBUGGING>
個人プロジェクト用の簡素化されたデバッグルーチン。

<PROBLEM_IDENTIFICATION>
- エラーメッセージ、ログ、観察された動作を収集
- 以前は動いていたものと現在壊れているものを特定
- 潜在的な原因として最近のgitコミットをチェック
- PLAN.mdから現在のタスクコンテキストを確認
</PROBLEM_IDENTIFICATION>

<SYSTEMATIC_ANALYSIS>
- 段階的推論を使用して問題を分離
- コードがどう動作すべきかの仮定をチェック
- 依存関係と環境設定を検証
- DEV_LOG.mdで類似パターンを探す
</SYSTEMATIC_ANALYSIS>

<SOLUTION_APPROACH>
- 最もシンプルな修正から始める
- 各変更を段階的にテストして検証
- 根本原因と解決アプローチを文書化
- これがテストのギャップを明らかにするかを考慮
</SOLUTION_APPROACH>

<LEARNING_CAPTURE>
- 問題と解決策をDEV_LOG.mdに記録
- 類似問題を防ぐことができるパターンを記録
- バグがギャップを明らかにした場合はテストを更新
- 将来の開発に役立つ洞察を共有
</LEARNING_CAPTURE>

## デバッグワークフロー:
1. **再現** - 問題を一貫してトリガーできることを確認
2. **分離** - 特定のコンポーネント/関数に絞り込む
3. **理解** - なぜそれが起こっているかを把握
4. **修正** - 必要最小限の変更を実装
5. **検証** - 修正が機能し、他を壊していないことをテスト
6. **文書化** - DEV_LOG.mdに学びを記録

## 一般的なデバッグ技術:
- 可視性のためにconsole.log/print文を追加
- 利用可能な場合はデバッガーツールを使用
- git diffで最近の変更をチェック
- 問題を分離するために一時的に変更を戻す
- 複雑さを取り除いて問題を単純化

</DEBUGGING>
