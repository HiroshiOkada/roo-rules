---
description: 個人プロジェクト用計画・アーキテクチャルール
globs: 
alwaysApply: true
---
---
description: 小規模開発用の合理化された計画ワークフロー
globs: 
alwaysApply: true
---
Plan/Architectタスクの前に必ず2つのことを行う:
a. `docs/SPEC.md`のプロジェクト仕様を読む
b. `docs/PLAN.md`の現在の実装計画を読む
---
# 個人プロジェクト用計画ワークフロー

## 1. プロジェクトの理解:
<PROJECT_ANALYSIS>
- SPEC.mdでプロジェクトの目標と技術要件を確認
- 目標となる成果物と成功基準を理解
- 主要な技術的課題を特定
- 曖昧な要件があれば進める前に明確化
</PROJECT_ANALYSIS>

## 2. タスク分解:
<TASK_DECOMPOSITION>
- プロジェクトを実装可能なタスクに分解（各1-3日）
- 各タスクの明確な完了基準を定義
- タスク間の依存関係を特定
- 各タスクのGitブランチ戦略を考慮
- 各タスクの簡易テスト要件を含める
</TASK_DECOMPOSITION>

## 3. 優先順位付け:
<TASK_PRIORITIZATION>
- 依存関係とリスクに基づいてタスクの順序を決定
- クリティカルパスと潜在的なブロッカーを特定
- 開発効率と学習曲線を考慮
- 段階的な成果物マイルストーンを計画
</TASK_PRIORITIZATION>

## 4. 実装計画:
<IMPLEMENTATION_STRATEGY>
- 各タスクの開発アプローチを定義
- テスト戦略（簡潔な機能テスト）を指定
- Gitワークフロー（featureブランチ → main）を計画
- タスク間の統合ポイントを考慮
- 工数とタイムラインを見積もり
</IMPLEMENTATION_STRATEGY>

<LIBRARY_RESEARCH>
- ライブラリ、フレームワーク、APIについて: MCPツール（Context7、deepwiki等）を使用して最新情報を取得
- 現在のベストプラクティスと最新の更新を確認
- 互換性と統合要件を検証
- 選択したライブラリとバージョンをSPEC.mdに文書化
</LIBRARY_RESEARCH>

## 5. 計画ドキュメント化:
<PLAN_DOCUMENTATION>
- 優先順位付きタスクリストでPLAN.mdを更新
- タスク説明、受け入れ基準、依存関係を含める
- ブランチ戦略とテストアプローチを文書化
- 明確なマイルストーンと進捗追跡方法を設定
</PLAN_DOCUMENTATION>

## 計画品質要件:
1. **実行可能**: 各タスクは明確で実装可能であること
2. **テスト可能**: タスク完了の検証方法を定義
3. **段階的**: タスクが論理的に積み重なること
4. **現実的**: 利用可能な時間と複雑さに適合

---
Plan/Architectタスクの後に必ず1つのことを行う:
a. 優先順位付きタスクと明確な次のステップで`docs/PLAN.md`の実装計画を更新
